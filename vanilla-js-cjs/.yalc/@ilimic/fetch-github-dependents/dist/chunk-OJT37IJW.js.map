{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import axios from \"axios\";\nimport { load } from \"cheerio\";\n\nclass Repo {\n  constructor(\n    public readonly user: string,\n    public readonly repo: string,\n    public readonly stars: number\n  ) {}\n\n  public getUrl() {\n    return `https://github.com/${this.user}/${this.repo}`;\n  }\n}\n\nexport const githubUserSlugRegex = /^[A-Za-z0-9-]+$/i;\nexport const githubRepoSlugRegex = /^[A-Za-z0-9-_\\.]+$/;\n\nasync function getData(\n  url: string,\n  reposToScan?: number\n): Promise<{ repos: Repo[]; count: number }> {\n  const repos: Repo[] = [];\n  let repoCount: number = undefined;\n  let delay = 0;\n\n  do {\n    await new Promise((resolve) => setTimeout(resolve, delay));\n    delay = 0;\n\n    let data: string;\n\n    try {\n      const request = await axios.get(url);\n      data = await request.data;\n    } catch (error) {\n      if (error.response && error.response.status === 429) {\n        // if we get HTTP 429 Too Many Requests we should sleep for a while\n        console.log(\"error.response.status\", error.response.status);\n        // console.log(\"error.response.headers\", error.response.headers);\n\n        if (\n          error.response.headers[\"retry-after\"] &&\n          /^[0-9]+$/.test(error.response.headers[\"retry-after\"])\n        ) {\n          delay = Number(error.response.headers[\"retry-after\"]) * 1000;\n        } else {\n          // default to 5 minutes\n          delay = 5 * 60 * 1000;\n        }\n\n        console.log(\n          `Got HTTP 429 Too Many Requests, sleeping for ${\n            delay / 1000\n          } seconds...`\n        );\n\n        continue;\n      }\n\n      console.log(\"error.message\", error.message);\n      return { repos, count: repoCount };\n    }\n\n    const $ = load(data);\n\n    if (repoCount === undefined) {\n      // string that we get is something like \" 1,334,607 Repositories \"\n      repoCount = Number(\n        $(\"svg.octicon-code-square\")\n          .parent()\n          .text()\n          .replace(/[^0-9]/g, \"\")\n      );\n    }\n\n    const rows = $('[data-test-id=\"dg-repo-pkg-dependent\"]');\n\n    for (let i = 0; i < rows.length; i++) {\n      const row = rows[i];\n      const user = $(row)\n        .find(\n          'a[data-hovercard-type=\"user\"],a[data-hovercard-type=\"organization\"]'\n        )\n        .eq(0)\n        .text();\n      const repo = $(row)\n        .find('a[data-hovercard-type=\"repository\"]')\n        .eq(0)\n        .text();\n      const stars = $(row).find(\"svg.octicon-star\").parent().text();\n\n      if (user === \"\" || repo === \"\") {\n        console.error(\n          `Failed to get user and/or repo for repo ${user}/${repo}.`\n        );\n      }\n\n      repos.push(new Repo(user, repo, Number(stars)));\n\n      if (reposToScan !== undefined && repos.length >= reposToScan) {\n        console.log(`Went through ${repos.length}/${repoCount} repos...`);\n        return { repos, count: repoCount };\n      }\n    }\n\n    const nextLink = $(\n      '.paginate-container .btn.BtnGroup-item:contains(\"Next\")'\n    ).eq(0);\n\n    url = nextLink.length ? nextLink.attr(\"href\") : null;\n    console.log(`Went through ${repos.length}/${repoCount} repos...`);\n  } while (url);\n\n  return { repos, count: repoCount };\n}\n\nexport async function getRepos(\n  url: string,\n  reposToScan: number = undefined,\n  sort: undefined | \"asc\" | \"desc\"\n): Promise<{ repos: Repo[]; count: number }> {\n  const { repos, count } = await getData(url, reposToScan);\n\n  // todo: sort by name as tie braker\n  if (sort === \"desc\") {\n    repos.sort((a, b) => b.stars - a.stars);\n  } else if (sort === \"asc\") {\n    repos.sort((a, b) => a.stars - b.stars);\n  }\n\n  return { repos, count };\n}\n"],"mappings":"AAAA,OAAOA,MAAW,QAClB,OAAS,QAAAC,MAAY,UAErB,IAAMC,EAAN,KAAW,CACT,YACkBC,EACAC,EACAC,EAChB,CAHgB,UAAAF,EACA,UAAAC,EACA,WAAAC,CACf,CAEI,QAAS,CACd,MAAO,sBAAsB,KAAK,IAAI,IAAI,KAAK,IAAI,EACrD,CACF,EAEaC,EAAsB,mBACtBC,EAAsB,qBAEnC,eAAeC,EACbC,EACAC,EAC2C,CAC3C,IAAMC,EAAgB,CAAC,EACnBC,EACAC,EAAQ,EAEZ,EAAG,CACD,MAAM,IAAI,QAASC,GAAY,WAAWA,EAASD,CAAK,CAAC,EACzDA,EAAQ,EAER,IAAIE,EAEJ,GAAI,CAEFA,EAAO,MADS,MAAMf,EAAM,IAAIS,CAAG,GACd,IACvB,OAASO,EAAO,CACd,GAAIA,EAAM,UAAYA,EAAM,SAAS,SAAW,IAAK,CAEnD,QAAQ,IAAI,wBAAyBA,EAAM,SAAS,MAAM,EAIxDA,EAAM,SAAS,QAAQ,aAAa,GACpC,WAAW,KAAKA,EAAM,SAAS,QAAQ,aAAa,CAAC,EAErDH,EAAQ,OAAOG,EAAM,SAAS,QAAQ,aAAa,CAAC,EAAI,IAGxDH,EAAQ,EAAI,GAAK,IAGnB,QAAQ,IACN,gDACEA,EAAQ,GACV,aACF,EAEA,QACF,CAEA,eAAQ,IAAI,gBAAiBG,EAAM,OAAO,EACnC,CAAE,MAAAL,EAAO,MAAOC,CAAU,CACnC,CAEA,IAAMK,EAAIhB,EAAKc,CAAI,EAEfH,IAAc,SAEhBA,EAAY,OACVK,EAAE,yBAAyB,EACxB,OAAO,EACP,KAAK,EACL,QAAQ,UAAW,EAAE,CAC1B,GAGF,IAAMC,EAAOD,EAAE,wCAAwC,EAEvD,QAASE,EAAI,EAAGA,EAAID,EAAK,OAAQC,IAAK,CACpC,IAAMC,EAAMF,EAAKC,CAAC,EACZhB,EAAOc,EAAEG,CAAG,EACf,KACC,qEACF,EACC,GAAG,CAAC,EACJ,KAAK,EACFhB,EAAOa,EAAEG,CAAG,EACf,KAAK,qCAAqC,EAC1C,GAAG,CAAC,EACJ,KAAK,EACFf,EAAQY,EAAEG,CAAG,EAAE,KAAK,kBAAkB,EAAE,OAAO,EAAE,KAAK,EAU5D,IARIjB,IAAS,IAAMC,IAAS,KAC1B,QAAQ,MACN,2CAA2CD,CAAI,IAAIC,CAAI,GACzD,EAGFO,EAAM,KAAK,IAAIT,EAAKC,EAAMC,EAAM,OAAOC,CAAK,CAAC,CAAC,EAE1CK,IAAgB,QAAaC,EAAM,QAAUD,EAC/C,eAAQ,IAAI,gBAAgBC,EAAM,MAAM,IAAIC,CAAS,WAAW,EACzD,CAAE,MAAAD,EAAO,MAAOC,CAAU,CAErC,CAEA,IAAMS,EAAWJ,EACf,yDACF,EAAE,GAAG,CAAC,EAENR,EAAMY,EAAS,OAASA,EAAS,KAAK,MAAM,EAAI,KAChD,QAAQ,IAAI,gBAAgBV,EAAM,MAAM,IAAIC,CAAS,WAAW,CAClE,OAASH,GAET,MAAO,CAAE,MAAAE,EAAO,MAAOC,CAAU,CACnC,CAEA,eAAsBU,EACpBb,EACAC,EAAsB,OACtBa,EAC2C,CAC3C,GAAM,CAAE,MAAAZ,EAAO,MAAAa,CAAM,EAAI,MAAMhB,EAAQC,EAAKC,CAAW,EAGvD,OAAIa,IAAS,OACXZ,EAAM,KAAK,CAAC,EAAGc,IAAMA,EAAE,MAAQ,EAAE,KAAK,EAC7BF,IAAS,OAClBZ,EAAM,KAAK,CAAC,EAAGc,IAAM,EAAE,MAAQA,EAAE,KAAK,EAGjC,CAAE,MAAAd,EAAO,MAAAa,CAAM,CACxB","names":["axios","load","Repo","user","repo","stars","githubUserSlugRegex","githubRepoSlugRegex","getData","url","reposToScan","repos","repoCount","delay","resolve","data","error","$","rows","i","row","nextLink","getRepos","sort","count","b"]}