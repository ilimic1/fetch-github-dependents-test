#!/bin/env node
import{a as r,b as d,c as a}from"./chunk-OJT37IJW.js";import{Command as l,InvalidArgumentError as p,Option as h}from"commander";import{trimEnd as g}from"lodash-es";var c="1.0.0-alpha.11";var i=new l;i.name("github-dependents").description("CLI to fetch GitHub dependents and sort by stars.").version(c);i.command("fetch",{isDefault:!0}).description("Fetch dependents from GitHub").argument("<repo>","repo url, eg. https://github.com/ilimic1/github-dependents",e=>{if(/^(?:https?\:\/\/)github.com\/[A-Za-z0-9-]+\/[A-Za-z0-9-]+\/?/i.test(e))return g(e,"/");let[n,s]=e.split("/");if(r.test(n)&&d.test(s))return`https://github.com/${e}`;throw new p("Repo must be a valid HTTP GitHub repo URL or a user/repo string.")}).option("-m, --max <count>","maximum number of repos to scan/return, eg. 300",e=>{let t=parseInt(e,10);if(isNaN(t))throw new p("Count must be a number.");return t}).addOption(new h("-s, --sort <direction>","optionally sort by stars").choices(["asc","desc"]).default("desc")).option("--no-sort","disable default sorting by stars").action(async(e,t)=>{console.log(`Fetching dependents for ${e} ...`);let n=t.max?parseInt(t.max):void 0,s;t.sort==="desc"?s="desc":t.sort==="asc"?s="asc":s=void 0;let{repos:m}=await a(`${e}/network/dependents`,n,s);m.forEach(o=>{console.log(`${o.getUrl()} ${o.stars}`)})});i.parse();
//# sourceMappingURL=cli.js.map