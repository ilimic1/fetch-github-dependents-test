{"version":3,"sources":["../src/cli.ts","../package.json"],"sourcesContent":["#!/bin/env node\n\nimport { Command, InvalidArgumentError, Option } from \"commander\";\nimport { trimEnd } from \"lodash-es\";\nimport { version } from \"../package.json\";\nimport { getRepos, githubRepoSlugRegex, githubUserSlugRegex } from \"./index.js\";\n\nconst program = new Command();\n\nprogram\n  .name(\"github-dependents\")\n  .description(\"CLI to fetch GitHub dependents and sort by stars.\")\n  .version(version);\n\nprogram\n  .command(\"fetch\", { isDefault: true })\n  .description(\"Fetch dependents from GitHub\")\n  .argument(\n    \"<repo>\",\n    \"repo url, eg. https://github.com/ilimic1/github-dependents\",\n    (value) => {\n      const urlRegex =\n        /^(?:https?\\:\\/\\/)github.com\\/[A-Za-z0-9-]+\\/[A-Za-z0-9-]+\\/?/i;\n\n      if (urlRegex.test(value)) {\n        return trimEnd(value, \"/\");\n      }\n\n      const [user, repo] = value.split(\"/\");\n\n      if (githubUserSlugRegex.test(user) && githubRepoSlugRegex.test(repo)) {\n        return `https://github.com/${value}`;\n      }\n\n      throw new InvalidArgumentError(\n        \"Repo must be a valid HTTP GitHub repo URL or a user/repo string.\"\n      );\n    }\n  )\n  .option(\n    \"-m, --max <count>\",\n    \"maximum number of repos to scan/return, eg. 300\",\n    (value) => {\n      const parsedValue = parseInt(value, 10);\n      if (isNaN(parsedValue)) {\n        throw new InvalidArgumentError(\"Count must be a number.\");\n      }\n      return parsedValue;\n    }\n  )\n  .addOption(\n    new Option(\"-s, --sort <direction>\", \"optionally sort by stars\")\n      .choices([\"asc\", \"desc\"])\n      .default(\"desc\")\n  )\n  .option(\"--no-sort\", \"disable default sorting by stars\")\n  .action(async (repo, options) => {\n    console.log(`Fetching dependents for ${repo} ...`);\n\n    const max = options.max ? parseInt(options.max) : undefined;\n\n    let sort: undefined | \"asc\" | \"desc\";\n\n    if (options.sort === \"desc\") {\n      sort = \"desc\";\n    } else if (options.sort === \"asc\") {\n      sort = \"asc\";\n    } else {\n      // if --no-sort is passed sort will be false\n      sort = undefined;\n    }\n\n    const { repos } = await getRepos(`${repo}/network/dependents`, max, sort);\n\n    repos.forEach((repo) => {\n      console.log(`${repo.getUrl()} ${repo.stars}`);\n    });\n  });\n\nprogram.parse();\n","{\n  \"name\": \"@ilimic/fetch-github-dependents\",\n  \"version\": \"1.0.0-alpha.11\",\n  \"description\": \"Get Github project dependents and sort them by stars.\",\n  \"homepage\": \"https://github.com/ilimic1/fetch-github-dependents\",\n  \"type\": \"module\",\n  \"main\": \"./dist/index.js\",\n  \"exports\": {\n    \".\": {\n      \"import\": \"./dist/index.js\",\n      \"types\": \"./dist/index.d.ts\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"licenses\": [\n    {\n      \"license\": \"MIT\"\n    }\n  ],\n  \"bin\": \"bin/fetch-github-dependents.js\",\n  \"scripts\": {\n    \"build\": \"tsup-node\",\n    \"dev\": \"tsup-node --watch\",\n    \"prepublishOnly\": \"npm run build\",\n    \"test\": \"vitest run\"\n  },\n  \"author\": \"Ivo LimiÄ‡ <ilimic1@gmail.com>\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"@types/lodash-es\": \"^4.17.12\",\n    \"tsup\": \"^8.0.1\",\n    \"typescript\": \"^5.3.3\",\n    \"vitest\": \"^1.1.0\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^1.6.2\",\n    \"cheerio\": \"^1.0.0-rc.12\",\n    \"commander\": \"^11.1.0\",\n    \"lodash-es\": \"^4.17.21\"\n  },\n  \"files\": [\n    \"dist\"\n  ]\n}\n"],"mappings":";sDAEA,OAAS,WAAAA,EAAS,wBAAAC,EAAsB,UAAAC,MAAc,YACtD,OAAS,WAAAC,MAAe,YCDtB,IAAAC,EAAW,iBDKb,IAAMC,EAAU,IAAIC,EAEpBD,EACG,KAAK,mBAAmB,EACxB,YAAY,mDAAmD,EAC/D,QAAQE,CAAO,EAElBF,EACG,QAAQ,QAAS,CAAE,UAAW,EAAK,CAAC,EACpC,YAAY,8BAA8B,EAC1C,SACC,SACA,6DACCG,GAAU,CAIT,GAFE,gEAEW,KAAKA,CAAK,EACrB,OAAOC,EAAQD,EAAO,GAAG,EAG3B,GAAM,CAACE,EAAMC,CAAI,EAAIH,EAAM,MAAM,GAAG,EAEpC,GAAII,EAAoB,KAAKF,CAAI,GAAKG,EAAoB,KAAKF,CAAI,EACjE,MAAO,sBAAsBH,CAAK,GAGpC,MAAM,IAAIM,EACR,kEACF,CACF,CACF,EACC,OACC,oBACA,kDACCN,GAAU,CACT,IAAMO,EAAc,SAASP,EAAO,EAAE,EACtC,GAAI,MAAMO,CAAW,EACnB,MAAM,IAAID,EAAqB,yBAAyB,EAE1D,OAAOC,CACT,CACF,EACC,UACC,IAAIC,EAAO,yBAA0B,0BAA0B,EAC5D,QAAQ,CAAC,MAAO,MAAM,CAAC,EACvB,QAAQ,MAAM,CACnB,EACC,OAAO,YAAa,kCAAkC,EACtD,OAAO,MAAOL,EAAMM,IAAY,CAC/B,QAAQ,IAAI,2BAA2BN,CAAI,MAAM,EAEjD,IAAMO,EAAMD,EAAQ,IAAM,SAASA,EAAQ,GAAG,EAAI,OAE9CE,EAEAF,EAAQ,OAAS,OACnBE,EAAO,OACEF,EAAQ,OAAS,MAC1BE,EAAO,MAGPA,EAAO,OAGT,GAAM,CAAE,MAAAC,CAAM,EAAI,MAAMC,EAAS,GAAGV,CAAI,sBAAuBO,EAAKC,CAAI,EAExEC,EAAM,QAAST,GAAS,CACtB,QAAQ,IAAI,GAAGA,EAAK,OAAO,CAAC,IAAIA,EAAK,KAAK,EAAE,CAC9C,CAAC,CACH,CAAC,EAEHN,EAAQ,MAAM","names":["Command","InvalidArgumentError","Option","trimEnd","version","program","Command","version","value","trimEnd","user","repo","githubUserSlugRegex","githubRepoSlugRegex","InvalidArgumentError","parsedValue","Option","options","max","sort","repos","getRepos"]}